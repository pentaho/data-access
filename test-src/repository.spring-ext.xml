<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd"
  default-lazy-init="true">
  <!--
    default-lazy-init makes all of the beans in this file lazy-init=true which means they are not instantiated until
    they are referenced; this allows PentahoSystem to be fully initialized (which is used internally in
    SpringSecurityLoginModule and SpringSecurityPrincipalProvider (pentaho-third-party-security project)
  -->

  <!-- An access decision manager used by the business objects. -->
  <bean id="businessAccessDecisionManager" class="org.springframework.security.vote.UnanimousBased">
    <property name="allowIfAllAbstainDecisions" value="false" />
    <property name="decisionVoters">
      <list>
        <ref local="authorizationPolicyVoter" />
      </list>
    </property>
  </bean>

  <bean id="jcrTransactionManager" class="org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager">
    <property name="sessionFactory" ref="jcrSessionFactory" />
  </bean>

  <bean id="unifiedRepositoryTransactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="jcrTransactionManager" />
    <property name="transactionAttributeSource">
      <value>
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileAtVersion=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileById=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForRead=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForReadInBatch=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForRead=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecute=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecuteInBatch=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForExecute=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getChildren=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAcl=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.hasAccess=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getEffectiveAces=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateAcl=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.lockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.unlockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.canUnlockFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.restoreFileAtVersion=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummary=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaryInBatch=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaries=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFileAtVersion=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.undeleteFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.moveFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.copyFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getTree=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getReferrers=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setFileMetadata=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileMetadata=PROPAGATION_REQUIRED,readOnly
      </value>
    </property>
  </bean>
  
  
  <bean id="IMondrianCatalogService" class="org.pentaho.platform.plugin.action.mondrian.catalog.MondrianCatalogHelper" scope="singleton" />
  <bean id="ICacheManager" class="org.pentaho.platform.plugin.services.cache.CacheManager" scope="singleton" />

  <bean id="IDatabaseDialectService" class="org.pentaho.database.service.DatabaseDialectService" scope="singleton" />
  
  <bean id="IDatasourceMgmtService" class="org.pentaho.platform.repository2.unified.JcrBackedDatasourceMgmtService" scope="singleton">
    <constructor-arg ref="unifiedRepository" />
    <constructor-arg ref="IDatabaseDialectService" />
  </bean>

  <bean id="unifiedRepository" class="org.pentaho.platform.repository2.unified.ExceptionLoggingDecorator">
    <constructor-arg ref="unifiedRepositoryProxy" />
  </bean>

  <bean id="unifiedRepositoryProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="unifiedRepositoryTarget" />
    <property name="interceptorNames">
      <list>
        <idref local="unifiedRepositoryTransactionInterceptor" />
        <idref local="unifiedRepositoryMethodInterceptor" />
      </list>
    </property>
  </bean>

  <!-- The username to use to do internal work for no particular user. -->
  <!-- See Jackrabbit repository.xml adminId -->
  <bean id="repositoryAdminUsername" class="java.lang.String">
    <constructor-arg value="pentahoRepoAdmin" />
  </bean>

  <!-- This token allows Jackrabbit to trust that this application has already authenticated the user. -->
  <bean id="jcrPreAuthenticationToken" class="java.lang.String">
    <constructor-arg value="ZchBOvP8q9FQ" />
  </bean>

  <!-- The name of the authority which is granted to all authenticated users of a particular tenant. -->
  <bean id="tenantAuthenticatedAuthorityNamePattern" class="java.lang.String">
    <constructor-arg value="{0}_Authenticated" />
  </bean>

  <!-- The name of the authority which is granted to all admin users of a particular tenant. -->
  <bean id="tenantAdminAuthorityNamePattern" class="java.lang.String">
    <constructor-arg value="{0}_Admin" />
  </bean>

  <!-- The name of the authority which is granted to all authenticated users in single-tenancy mode. -->
  <bean id="singleTenantAuthenticatedAuthorityName" class="java.lang.String">
    <constructor-arg value="Authenticated" />
  </bean>

  <!-- The name of the authority which is granted to all admin users in single-tenancy mode. -->
  <bean id="singleTenantAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="Admin" />
  </bean>

  <!-- Used in code that doesn't use Spring's transaction interception. -->
  <!-- The code sets the propagation behavior to PROPAGATION_REQUIRES_NEW. -->
  <bean id="jcrTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <constructor-arg ref="jcrTransactionManager" />
  </bean>

  <bean id="abstractBackingRepositoryLifecycleManager" abstract="true">
    <constructor-arg ref="repositoryFileDao" />
    <constructor-arg ref="repositoryFileAclDao" />
    <constructor-arg ref="jcrTransactionTemplate" />
    <constructor-arg ref="repositoryAdminUsername" />
    <constructor-arg ref="tenantAuthenticatedAuthorityNamePattern" />
    <constructor-arg ref="singleTenantAuthenticatedAuthorityName" />
  </bean>

  <bean id="defaultBackingRepositoryLifecycleManager" class="org.pentaho.platform.repository2.unified.lifecycle.DefaultBackingRepositoryLifecycleManager"
    parent="abstractBackingRepositoryLifecycleManager" />
  <bean id="pdiBackingRepositoryLifecycleManager" class="org.pentaho.platform.repository2.unified.lifecycle.PdiBackingRepositoryLifecycleManager"
    parent="abstractBackingRepositoryLifecycleManager" />
  <bean id="sampleDataRepositoryLifecycleManager" class="org.pentaho.platform.repository2.unified.lifecycle.SampleDataRepositoryLifecycleManager" >
    <constructor-arg ref="IDatasourceMgmtService" />
    <constructor-arg ref="IDatabaseDialectService" />    
  </bean>
  <bean id="mondrianBackingRepositoryLifecycleManager" class="org.pentaho.platform.repository2.unified.lifecycle.MondrianBackingRepositoryLifecycleManager"
    parent="abstractBackingRepositoryLifecycleManager" />
  <bean id="backingRepositoryLifecycleManager" class="org.pentaho.platform.repository2.unified.lifecycle.DelegatingBackingRepositoryLifecycleManager">
    <constructor-arg>
      <list>
        <ref bean="defaultBackingRepositoryLifecycleManager" />
        <ref bean="pdiBackingRepositoryLifecycleManager" />
        <ref bean="sampleDataRepositoryLifecycleManager" />
        <ref bean="mondrianBackingRepositoryLifecycleManager" />
      </list>
    </constructor-arg>
  </bean>

  <bean id="unifiedRepositoryTarget" class="org.pentaho.platform.repository2.unified.DefaultUnifiedRepository">
    <constructor-arg ref="repositoryFileDao" />
    <constructor-arg ref="repositoryFileAclDao" />
  </bean>

  <bean id="unifiedRepositoryMethodInterceptor" class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager" />
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager" />
    </property>
    <property name="objectDefinitionSource">
      <value>
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileAtVersion=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileById=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForRead=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForReadInBatch=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForRead=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecute=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecuteInBatch=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForExecute=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFolder=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getChildren=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAcl=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.hasAccess=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getEffectiveAces=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateAcl=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.lockFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.unlockFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.canUnlockFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.restoreFileAtVersion=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummary=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaryInBatch=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaries=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFileAtVersion=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.undeleteFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.moveFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.copyFile=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getTree=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getReferrers=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setFileMetadata=VOTE_AUTHZ_POLICY_org.pentaho.repository.create
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileMetadata=VOTE_AUTHZ_POLICY_org.pentaho.repository.read
      </value>
    </property>
  </bean>

  <!-- Jackrabbit repo automatically shut down when Spring application context closed (DisposableBean) -->
  <bean id="jcrRepository" class="org.springframework.extensions.jcr.jackrabbit.RepositoryFactoryBean">
    <property name="configuration" value="/jackrabbit/repository.xml" />
    <property name="homeDir" value="/jackrabbit/repository" />
  </bean>

  <bean id="jcrSessionFactory" class="org.pentaho.platform.repository2.unified.jcr.sejcr.CredentialsStrategyJackrabbitSessionFactory">
    <constructor-arg ref="jcrRepository" />
    <constructor-arg>
      <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.PentahoSessionCredentialsStrategy">
        <constructor-arg ref="jcrPreAuthenticationToken" />
      </bean>
    </constructor-arg>
    <property name="namespaces">
      <props>
        <prop key="pho">http://www.pentaho.org/jcr/1.0</prop>
        <prop key="pho_nt">http://www.pentaho.org/jcr/nt/1.0</prop>
        <prop key="pho_mix">http://www.pentaho.org/jcr/mix/1.0</prop>
      </props>
    </property>
    <!-- order matters! -->
    <property name="nodeDefinitions">
      <list>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoInternalFolder.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoLocalizedString.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoHierarchyNode.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoFile.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoFolder.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoLockable.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoLockTokenStorage.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoVersionable.cnd</value>
        <value>classpath:/org/pentaho/platform/repository2/unified/jcr/jackrabbit/pentahoAcl.cnd</value>
      </list>
    </property>
  </bean>

  <bean id="jcrTemplate" class="org.pentaho.platform.repository2.unified.jcr.sejcr.PentahoJcrTemplate">
    <property name="sessionFactory" ref="jcrSessionFactory" />
    <property name="allowCreate" value="false" />
    <property name="exposeNativeSession" value="true" />
  </bean>

  <bean id="repositoryFileDao" class="org.pentaho.platform.repository2.unified.jcr.JcrRepositoryFileDao">
    <constructor-arg ref="jcrTemplate" />
    <constructor-arg ref="transformers" />
    <constructor-arg ref="ownerLookupHelper" />
    <constructor-arg ref="lockHelper" />
    <constructor-arg>
      <bean class="org.pentaho.platform.repository2.unified.jcr.DefaultDeleteHelper">
        <constructor-arg ref="ownerLookupHelper" />
        <constructor-arg ref="lockHelper" />
        <constructor-arg ref="pathConversionHelper" />
      </bean>
    </constructor-arg>
    <constructor-arg ref="pathConversionHelper" />
    <constructor-arg ref="escapeHelper" />
    <constructor-arg ref="repositoryFileAclDao" />
  </bean>

  <util:list id="transformers">
    <bean class="org.pentaho.platform.repository2.unified.jcr.transform.SampleRepositoryFileDataTransformer" />
    <bean class="org.pentaho.platform.repository2.unified.jcr.transform.SimpleRepositoryFileDataTransformer" />
    <bean class="org.pentaho.platform.repository2.unified.jcr.transform.NodeRepositoryFileDataTransformer" />
  </util:list>

  <bean id="lockHelper" class="org.pentaho.platform.repository2.unified.jcr.jackrabbit.DefaultLockHelper" />

  <bean id="ownerLookupHelper" class="org.pentaho.platform.repository2.unified.jcr.DefaultOwnerLookupHelper" />

  <bean id="pathConversionHelper" class="org.pentaho.platform.repository2.unified.jcr.DefaultPathConversionHelper" />
  
  <bean id="escapeHelper" class="org.pentaho.platform.repository2.unified.jcr.jackrabbit.DefaultEscapeHelper" />

  <bean class="org.pentaho.platform.repository2.unified.spring.BackingRepositoryLifecycleManagerAuthenticationSuccessListener" />

  <bean id="repositoryFileAclDao" class="org.pentaho.platform.repository2.unified.jcr.jackrabbit.JackrabbitRepositoryFileAclDao">
    <constructor-arg ref="jcrTemplate" />
    <constructor-arg ref="pathConversionHelper" />
  </bean>

  <!-- begin authorization policy -->

  <bean id="authorizationPolicy" class="org.pentaho.platform.security.policy.rolebased.RoleAuthorizationPolicy">
    <constructor-arg ref="roleAuthorizationPolicyActionBindingDao" />
    <!--
      authorization policy should not be blocked by security checks (because it is involved in doing the security
      checks!)
    -->
    <constructor-arg ref="roleAuthorizationPolicyRoleBindingDaoTarget" />
  </bean>

  <bean id="roleAuthorizationPolicyActionBindingDao" class="org.pentaho.platform.security.policy.rolebased.MapBasedRoleAuthorizationPolicyActionBindingDao">
    <constructor-arg>
      <util:map>
        <entry key="org.pentaho.repository.create">
          <util:list>
            <value>org.pentaho.di.creator</value>
          </util:list>
        </entry>
        <entry key="org.pentaho.repository.read">
          <util:list>
            <value>org.pentaho.di.reader</value>
          </util:list>
        </entry>
        <entry key="org.pentaho.security.administerSecurity">
          <util:list>
            <value>org.pentaho.di.securityAdministrator</value>
          </util:list>
        </entry>
      </util:map>
    </constructor-arg>
  </bean>

  <bean id="roleAuthorizationPolicyRoleBindingDaoTarget" class="org.pentaho.platform.security.policy.rolebased.JcrRoleAuthorizationPolicyRoleBindingDao">
    <constructor-arg ref="jcrTransactionTemplate" />
    <constructor-arg ref="jcrTemplate" />
    <constructor-arg>
      <util:list>
        <value>org.pentaho.di.reader</value>
        <value>org.pentaho.di.creator</value>
        <value>org.pentaho.di.securityAdministrator</value>
      </util:list>
    </constructor-arg>
    <constructor-arg>
      <util:map>
        <!-- root locale -->
        <entry key="">
          <value><![CDATA[
          org.pentaho.di.reader=Read Content
          org.pentaho.di.creator=Create Content
          org.pentaho.di.securityAdministrator=Administrate
          ]]></value>
        </entry>
      </util:map>
    </constructor-arg>
    <constructor-arg ref="immutableRoleBindingMap" />
    <constructor-arg ref="bootstrapRoleBindingMap" />
    <constructor-arg ref="repositoryAdminUsername" />
  </bean>

  <util:map id="immutableRoleBindingMap">
    <!-- {0} placeholder will be replaced with current tenant id -->
    <entry key-ref="tenantAdminAuthorityNamePattern">
      <util:list>
        <value>org.pentaho.di.reader</value>
        <value>org.pentaho.di.creator</value>
        <value>org.pentaho.di.securityAdministrator</value>
      </util:list>
    </entry>
    <!-- for single tenant mode -->
    <entry key-ref="singleTenantAdminAuthorityName">
      <util:list>
        <value>org.pentaho.di.reader</value>
        <value>org.pentaho.di.creator</value>
        <value>org.pentaho.di.securityAdministrator</value>
      </util:list>
    </entry>
  </util:map>

  <util:map id="bootstrapRoleBindingMap">
    <!-- {0} placeholder will be replaced with current tenant id -->
    <entry key-ref="tenantAuthenticatedAuthorityNamePattern">
      <util:list>
        <value>org.pentaho.di.reader</value>
        <value>org.pentaho.di.creator</value>
      </util:list>
    </entry>
    <!-- for single tenant mode -->
    <entry key-ref="singleTenantAuthenticatedAuthorityName">
      <util:list>
        <value>org.pentaho.di.reader</value>
        <value>org.pentaho.di.creator</value>
      </util:list>
    </entry>
  </util:map>
  <bean id="roleAuthorizationPolicyRoleBindingDao" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="roleAuthorizationPolicyRoleBindingDaoTarget" />
    <property name="interceptorNames">
      <list>
        <idref local="roleAuthorizationPolicyRoleBindingDaoMethodInterceptor" />
      </list>
    </property>
  </bean>

  <bean id="roleAuthorizationPolicyRoleBindingDaoMethodInterceptor" class="org.springframework.security.intercept.method.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager" />
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager" />
    </property>
    <property name="objectDefinitionSource">
      <value>
        org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.getRoleBindingStruct=VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity
        org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.setRoleBindings=VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity
      </value>
    </property>
  </bean>

  <!-- An access decision voter that reads VOTE_AUTHZ_POLICY_* configuration settings -->
  <bean id="authorizationPolicyVoter" class="org.pentaho.platform.security.policy.rolebased.springsecurity.AuthorizationPolicyVoter">
    <constructor-arg ref="authorizationPolicy" />
    <constructor-arg value="VOTE_AUTHZ_POLICY_" />
  </bean>

  <!-- end authorization policy -->

</beans>
