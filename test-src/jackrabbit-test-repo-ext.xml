<?xml version="1.0"?>
<!--
Jackrabbit configuration suitable for integration tests.
-->
<!DOCTYPE Repository PUBLIC "-//The Apache Software Foundation//DTD Jackrabbit 1.5//EN"
                            "http://jackrabbit.apache.org/dtd/repository-1.5.dtd">
<!-- Example Repository Configuration File
     Used by
     - org.apache.jackrabbit.core.config.RepositoryConfigTest.java
     -
-->
<Repository>
    <!--
        virtual file system where the repository stores global state
        (e.g. registered namespaces, custom node types, etc.)
    -->
    <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
        <param name="path" value="${rep.home}/repository"/>
    </FileSystem>

    <!--
        security configuration
    -->
    <Security appName="Jackrabbit">
        <!--
            security manager:
            class: FQN of class implementing the JackrabbitSecurityManager interface
        -->
        <SecurityManager class="org.apache.jackrabbit.core.PentahoSecurityManager" workspaceName="security" />

        <!--
            access manager:
            class: FQN of class implementing the AccessManager interface
        -->
        <AccessManager class="org.apache.jackrabbit.core.security.DefaultAccessManager">
            <!-- <param name="config" value="${rep.home}/access.xml"/> -->
        </AccessManager>

        <LoginModule class="org.apache.jackrabbit.core.security.simple.SimpleLoginModule">
           <!-- 
              anonymous user name ('anonymous' is the default value)
            -->
           <param name="anonymousId" value="anonymous"/>
           <!--
              administrator user id (default value if param is missing is 'admin')
            -->
           <param name="adminId" value="pentahoRepoAdmin"/>
           
           <!-- 
              administrator role id (default value if param is missing is 'administrators');
              must match /Repository/Workspace/WorkspaceSecurity/AccessControlProvider/param      
            -->
           <param name="adminRole" value="pentahoRepoAdministrators" />
           
           <param name="principalProvider" 
               value="org.pentaho.platform.repository2.unified.jcr.jackrabbit.security.TestPrincipalProvider"/>
        </LoginModule>
    </Security>




    <!--
        location of workspaces root directory and name of default workspace
    -->
    <Workspaces rootPath="${rep.home}/workspaces" defaultWorkspace="default"/>
    <!--
        workspace configuration template:
        used to create the initial workspace if there's no workspace yet
    -->
    <Workspace name="${wsp.name}">
        <!--
            virtual file system of the workspace:
            class: FQN of class implementing the FileSystem interface
        -->
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${wsp.home}"/>
        </FileSystem>
        <!--
            persistence manager of the workspace:
            class: FQN of class implementing the PersistenceManager interface
        -->
        <PersistenceManager class="org.apache.jackrabbit.core.persistence.bundle.DerbyPersistenceManager">
          <param name="url" value="jdbc:derby:${wsp.home}/db;create=true"/>
          <param name="schemaObjectPrefix" value="${wsp.name}_"/>
        </PersistenceManager>
        <!--
            Search index and the file system it uses.
            class: FQN of class implementing the QueryHandler interface
        -->
        <SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
            <param name="path" value="${wsp.home}/index"/>
            <param name="textFilterClasses" value="org.apache.jackrabbit.extractor.PlainTextExtractor,org.apache.jackrabbit.extractor.MsWordTextExtractor,org.apache.jackrabbit.extractor.MsExcelTextExtractor,org.apache.jackrabbit.extractor.MsPowerPointTextExtractor,org.apache.jackrabbit.extractor.PdfTextExtractor,org.apache.jackrabbit.extractor.OpenOfficeTextExtractor,org.apache.jackrabbit.extractor.RTFTextExtractor,org.apache.jackrabbit.extractor.HTMLTextExtractor,org.apache.jackrabbit.extractor.XMLTextExtractor"/>
            <param name="extractorPoolSize" value="2"/>
            <param name="supportHighlighting" value="true"/>
        </SearchIndex>
        
        <WorkspaceSecurity> 
            <AccessControlProvider class="org.pentaho.platform.repository2.unified.jcr.jackrabbit.security.PentahoAccessControlProvider">
              <!-- must match /Repository/Security/LoginModule/param -->
              <param name="adminRole" value="pentahoRepoAdministrators" />
              <param name="helperClass" value="org.pentaho.platform.repository2.unified.jcr.jackrabbit.security.DefaultPentahoJackrabbitAccessControlHelper" />
              <!-- users with administerSecurity get Permission.ALL if effective ACL is at tenant root or below -->
              <param name="wildcardDynamicMask0" value="/pentaho/{0}=org.pentaho.security.administerSecurity:4095" />
              <!-- users with read get Permission.READ and Permission.READ_ACL if effective ACL is at tenant root -->
              <param name="dynamicMask0" value="/pentaho/{0}=org.pentaho.repository.read:33" />
              <!-- users with read get Permission.READ and Permission.READ_ACL if effective ACL is at tenant etc/pdi -->
              <param name="dynamicMask1" value="/pentaho/{0}/etc/pdi=org.pentaho.repository.read:33" />
              <!-- users with create get Permission.READ and Permission.READ_AC and Permission.MODIFY_AC and Permission.LOCK_MNGMT and Permission.VERSION_MNGMT and Permission.NODE_TYPE_MNGMT and Permission.REMOVE_NODE and Permission.REMOVE_PROPERTY and Permission.ADD_NODE and Permission.SET_PROPERTY if effective ACL is at tenant etc/pdi -->
              <param name="dynamicMask2" value="/pentaho/{0}/etc/pdi=org.pentaho.repository.create:1023" />
            </AccessControlProvider>
        </WorkspaceSecurity> 
    </Workspace>

    <!--
        Configures the versioning
    -->
    <Versioning rootPath="${rep.home}/version">
        <!--
            Configures the filesystem to use for versioning for the respective
            persistence manager
        -->
        <FileSystem class="org.apache.jackrabbit.core.fs.local.LocalFileSystem">
            <param name="path" value="${rep.home}/version" />
        </FileSystem>

        <!--
            Configures the persistence manager to be used for persisting version state.
            Please note that the current versioning implementation is based on
            a 'normal' persistence manager, but this could change in future
            implementations.
        -->
        <PersistenceManager class="org.apache.jackrabbit.core.persistence.bundle.DerbyPersistenceManager">
          <param name="url" value="jdbc:derby:${rep.home}/version/db;create=true"/>
          <param name="schemaObjectPrefix" value="version_"/>
        </PersistenceManager>
    </Versioning>

    <!--
        Search index for content that is shared repository wide
        (/jcr:system tree, contains mainly versions)
    -->
    <SearchIndex class="org.apache.jackrabbit.core.query.lucene.SearchIndex">
        <param name="path" value="${rep.home}/repository/index"/>
        <param name="textFilterClasses" value="org.apache.jackrabbit.extractor.PlainTextExtractor,org.apache.jackrabbit.extractor.MsWordTextExtractor,org.apache.jackrabbit.extractor.MsExcelTextExtractor,org.apache.jackrabbit.extractor.MsPowerPointTextExtractor,org.apache.jackrabbit.extractor.PdfTextExtractor,org.apache.jackrabbit.extractor.OpenOfficeTextExtractor,org.apache.jackrabbit.extractor.RTFTextExtractor,org.apache.jackrabbit.extractor.HTMLTextExtractor,org.apache.jackrabbit.extractor.XMLTextExtractor"/>
        <param name="extractorPoolSize" value="2"/>
        <param name="supportHighlighting" value="true"/>
    </SearchIndex>
</Repository>