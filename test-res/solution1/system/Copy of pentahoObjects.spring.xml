<?xml version="1.0" encoding="UTF-8"?>
<!-- 
This is a Spring file that defines how Pentaho system objects are created and managed.  
An implementation of IPentahoObjectFactory, such as WebSpringPentahoObjectFactory, is 
responsible for serving objects to callers based on this file.

Possible values for scope attribute:
*singleton* - each request for this object returns the same instance
*prototype* - each request for this object returns a new instance
*session* - each request for this object within a session returns the same instance

default-lazy-init is set to true since some of these object make calls into 
PentahoSystem which is initialized after Spring
 -->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd"
  default-lazy-init="true">
  
  <bean id="ISolutionEngine" class="org.pentaho.platform.engine.services.solution.SolutionEngine" scope="prototype" />
  <!-- Uncomment the following line to use a filesystem-based repository. Note: does not support ACLs.  -->
  <bean id="ISolutionRepository" class="org.pentaho.platform.repository.solution.filebased.FileBasedSolutionRepository" scope="session" />
  <!-- Uncomment the following line to use a filesystem/db-based repository with meta information stored in a db  -->
  <!-- <bean id="ISolutionRepository" class="org.pentaho.platform.repository.solution.dbbased.DbBasedSolutionRepository" scope="session" /> -->
  <bean id="ISolutionRepositoryService" class="org.pentaho.platform.repository.solution.SolutionRepositoryServiceImpl" scope="session" />
  <bean id="IContentRepository" class="org.pentaho.platform.repository.content.ContentRepository" scope="session" />
  <!-- runtime repositories are not used in the current implmentation of the BI platform -->
  <!-- <bean id="IRuntimeRepository" class="org.pentaho.platform.repository.runtime.RuntimeRepository" scope="session" /> -->
  <bean id="IAuditEntry" class="org.pentaho.platform.engine.core.audit.NullAuditEntry" scope="singleton" />
  <!-- bean id="IUITemplater" class="org.pentaho.platform.web.http.WebTemplateHelper" scope="singleton" /> -->
  <!-- bean id="IUserFilesComponent" class="org.pentaho.platform.web.refactor.UserFilesComponent" scope="session" /> -->
  <!-- bean id="IBackgroundExecution" class="org.pentaho.platform.scheduler.SecurityAwareBackgroundExecutionHelper" scope="singleton" /> -->
  <!-- bean id="BackgroundSubscriptionExecution" class="org.pentaho.platform.scheduler.SecurityAwareBackgroundSubscriptionHelper" scope="singleton" /> -->
  <!-- bean id="ISubscriptionRepository" class="org.pentaho.platform.repository.subscription.SubscriptionRepository" scope="singleton" /> -->
  <!-- bean id="ISubscriptionScheduler" class="org.pentaho.platform.scheduler.QuartzSubscriptionScheduler" scope="singleton" /> -->
  <!-- bean id="IMetadataDomainRepository" class="org.pentaho.platform.plugin.services.metadata.SecurityAwareMetadataDomainRepository" scope="singleton"/ -->
  <!--  Use this schema factory to disable PMD security -->
  <bean id="IMetadataDomainRepository" class="org.pentaho.platform.plugin.services.metadata.MetadataDomainRepository" scope="singleton"/>
  <bean id="IUserSettingService" class="org.pentaho.platform.repository.usersettings.UserSettingService" scope="session" />
  <bean id="file" class="org.pentaho.platform.plugin.outputs.FileOutputHandler" scope="session" />
  <bean id="vfs-ftp" class="org.pentaho.platform.plugin.outputs.ApacheVFSOutputHandler" scope="session" />
  <bean id="contentrepo" class="org.pentaho.platform.repository.content.ContentRepositoryOutputHandler" scope="session" />
  <bean id="IAclPublisher" class="org.pentaho.platform.engine.security.acls.AclPublisher" scope="singleton" />
  <bean id="IAclVoter" class="org.pentaho.platform.engine.security.acls.voter.PentahoBasicAclVoter" scope="singleton" />
  <bean id="IVersionHelper" class="com.pentaho.util.SubscriptionVersionHelper" scope="singleton" />
  <!-- bean id="ICacheManager" class="org.pentaho.platform.plugin.services.cache.CacheManager" scope="singleton" / -->
  <bean id="IScheduler" class="org.pentaho.platform.scheduler.QuartzScheduler" scope="session" />
  <bean id="IConditionalExecution" class="org.pentaho.platform.plugin.condition.javascript.ConditionalExecution" scope="prototype" />
  <bean id="IMessageFormatter" class="org.pentaho.platform.engine.services.MessageFormatter" scope="singleton" />
  <bean id="INavigationComponent" class="org.pentaho.platform.uifoundation.component.xml.NavigationComponent" scope="prototype" />
  <bean id="IVersionCheckDataProvider" class="com.pentaho.core.system.PentahoEEVersionCheckDataProvider" scope="prototype" />
  <!--
    IDBDatasourceService - options are: 
    org.pentaho.platform.engine.services.connection.datasource.dbcp.JndiDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.NonPooledOrJndiDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.PooledDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.NonPooledDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.PooledOrJndiDatasourceService  (Default option)
  -->
  <bean id="IDBDatasourceService" class="org.pentaho.platform.engine.services.connection.datasource.dbcp.PooledOrJndiDatasourceService" scope="singleton" />
  <bean id="IPasswordService" class="org.pentaho.platform.util.Base64PasswordService" scope="singleton" />
  <bean id="IDatasource" class="org.pentaho.platform.repository.datasource.Datasource" scope="prototype" />
  <bean id="IDatasourceMgmtService" class="org.pentaho.platform.repository.datasource.DatasourceMgmtService" scope="prototype" />
  <bean id="IVersionControl" class="com.pentaho.util.CommandLineVersionControl" scope="prototype" />
  <bean id="IPluginProvider" class="org.pentaho.platform.plugin.services.pluginmgr.SystemPathXmlPluginProvider" scope="singleton" />
  <bean id="IPluginManager" class="org.pentaho.platform.plugin.services.pluginmgr.DefaultPluginManager" scope="singleton" />
  <bean id="IPluginResourceLoader" class="org.pentaho.platform.plugin.services.pluginmgr.PluginResourceLoader" scope="singleton" />
  <bean id="IMenuProvider" class="org.pentaho.platform.web.html.HtmlMenuProvider" scope="singleton" />
  <bean id="IServiceManager" class="org.pentaho.platform.plugin.services.pluginmgr.servicemgr.DefaultServiceManager" scope="singleton">
    <property name="serviceTypeManagers"><list>
        <ref bean="gwtServiceManager"/>
        <ref bean="axisServiceManager"/>
      </list></property>
  </bean>
  <bean id="ITempFileDeleter" class="org.pentaho.platform.web.http.session.SessionTempFileDeleter" scope="prototype" />
  <bean id="gwtServiceManager" class="org.pentaho.platform.plugin.services.pluginmgr.servicemgr.GwtRpcServiceManager" scope="singleton"/>
  <bean id="axisServiceManager" class="org.pentaho.platform.plugin.services.pluginmgr.servicemgr.AxisWebServiceManager" scope="singleton"/>
  
  <bean id="IChartBeansGenerator" class="org.pentaho.platform.plugin.action.chartbeans.DefaultChartBeansGenerator" scope="singleton" />
  
  <bean id="systemStartupSession" class="org.pentaho.platform.engine.security.session.TrustedSystemStartupSession" scope="prototype" />  
  
    <!-- Data connections.  Connections objects should be accessed through PentahoConnectionFactory, 
       not directly from the PentahoObjectFactory. -->
  <bean id="connection-SQL" class="org.pentaho.platform.plugin.services.connections.sql.SQLConnection" scope="prototype" >
          <property name="fallBackToNonscrollableOnError" value="true" />
  </bean>
  <bean id="connection-MDX" class="org.pentaho.platform.plugin.services.connections.mondrian.MDXConnection" scope="prototype">
  	      <property name="useExtendedColumnNames" value="true" />
  </bean>
  <bean id="connection-XML" class="org.pentaho.platform.plugin.services.connections.xquery.XQConnection" scope="prototype" />
  <bean id="connection-HQL" class="org.pentaho.platform.plugin.services.connections.hql.HQLConnection" scope="prototype" />

  <bean id="IMondrianCatalogService" class="org.pentaho.platform.plugin.action.mondrian.catalog.MondrianCatalogHelper" scope="singleton" />

  <!--  This mondrian user/role mapper assumes that roles from the platform also exist in mondrian -->
  
  <!--
  Disabled by default in 3.5.2. In trunk, this should be enabled. 
  
  <bean id="Mondrian-UserRoleMapper" 
        name="Mondrian-One-To-One-UserRoleMapper"  
        class="org.pentaho.platform.plugin.action.mondrian.mapper.MondrianOneToOneUserRoleListMapper" 
        scope="singleton" />
  -->
  
  <!--  
  
  This sample mapper assumes that a translator is needed (in the form of a Map) to map a platform role to a mondrian role
  
  Note- Key = platform role, value = mondrian role
  
  <bean id="Mondrian-UserRoleMapper" 
        name="Mondrian-SampleLookupMap-UserRoleMapper" 
        class="org.pentaho.platform.plugin.action.mondrian.mapper.MondrianLookupMapUserRoleListMapper" 
        scope="singleton">
    <property name="lookupMap">
      <map>
        <entry key="ceo" value="M_CEO" />
        <entry key="cto" value="M_CTO" />
        <entry key="dev" value="M_DEV" />
      </map>
    </property>
  </bean>
   -->
  
  <!--  
  This sample mapper assumes that every user has their mondrian roles in their session under then named session variable
  
  <bean id="Mondrian-UserRoleMapper" 
        name="Mondrian-SampleUserSession-UserRoleMapper" 
        class="org.pentaho.platform.plugin.action.mondrian.mapper.MondrianUserSessionUserRoleListMapper" 
        scope="singleton">
    <property name="sessionProperty" value="MondrianUserRoles" />
  </bean>
  
  --> 
</beans>